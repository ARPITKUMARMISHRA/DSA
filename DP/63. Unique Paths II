class Solution {
public:

// int help(int i,int j,vector<vector<int>>& obstacleGrid,vector<vector<int>>&dp)
// {
//     if(i>=0 && j>=0 && (obstacleGrid[i][j]==1) )    return 0;
    
//     if(i==0 && j==0) return 1;
//     if(i<0 || j<0)return 0;
    
//     if(dp[i][j]!=-1) return dp[i][j];
//     return dp[i][j]=help(i-1,j,obstacleGrid,dp)+ help(i,j-1,obstacleGrid,dp);
// }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
      

        // return help(m-1,n-1,obstacleGrid,dp);


         vector<vector<int>>dp(m,vector<int>(n,-1));
         dp[0][0]=obstacleGrid[0][0];
        
         for(int i=0;i<m;i++)
         {
             for(int j=0;j<n;j++)
             {

                  int up=0,left=0;
                  if(i-1>=0)
                  up=dp[i-1][j];
                  if(j-1>=0)
                  left=dp[i][j-1];

                  dp[i][j]=up+left;

                  if(i==0 && j==0)
                  dp[i][j]=1;

                  if(obstacleGrid[i][j]==1)
                  dp[i][j]=0;

             }
         }

         return dp[m-1][n-1];
        
    }
};
