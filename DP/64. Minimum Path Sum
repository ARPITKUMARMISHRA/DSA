class Solution {
public:


//    long long int help(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&dp)
//    {
//      if(i==0 && j==0) return grid[i][j];

//      if(i<0 || j<0) return INT_MAX;
     
//      if(dp[i][j]!=-1)  return dp[i][j];
//      long long int left=help(i,j-1,grid,dp)+grid[i][j];
//     long long int down=help(i-1,j,grid,dp)+grid[i][j];

//      return dp[i][j]=min(left,down);

//    }
    int minPathSum(vector<vector<int>>& grid) {
       
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        
        dp[0][0]=grid[0][0];
        
        
        // for(int i=0;i<m;i++)
        // dp[i][0]=grid[i][0];


        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                int left=INT_MAX;
                int up=INT_MAX;
               
               if(j>0)
               left=dp[i][j-1];

               if(i>0)
               up=dp[i-1][j];
                

               int val=min(left,up);
               
               if(val==INT_MAX) val=0;
               dp[i][j]=grid[i][j]+val;

            }
        }

        return dp[m-1][n-1];


        // return help(m-1,n-1,grid,dp);
    }
};
