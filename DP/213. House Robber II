class Solution {
public:

int help(vector<int>nums,int index,vector<int>&dp)
{
   

    
    if(index==0) return nums[index];


    if(index<0) return 0;
     
      if(dp[index]!=-1) return dp[index];
    int pick=nums[index]+help(nums,index-2,dp);
   
    int notpick=help(nums,index-1,dp);


    
    return dp[index]=max(pick,notpick);
}

    int rob(vector<int>& nums) {
        

        int n=nums.size();

     if(n==1)
     return nums[n-1];
     
    vector<int>temp1,temp2;
    for(int i=0;i<n;i++)
    {
        if(i!=0) temp1.push_back(nums[i]);
        if(i!=n-1) temp2.push_back(nums[i]);
    }
    int n1=temp1.size();
    vector<int>dp(n1,-1);
  int ans1=help(temp1,n1-1,dp);

    vector<int>dp2(n1,-1);

    int ans2=help(temp2,n1-1,dp2);

    return max(ans1,ans2);
    }
};
